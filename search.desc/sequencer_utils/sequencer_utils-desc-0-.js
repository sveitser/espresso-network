searchState.loadedDescShard("sequencer_utils", 0, "Type alias that connects to providers with recommended …\nconverting a keccak256-based structured commitment (32 …\nsend a transaction and wait for confirmation before …\nDeserialize a type from either a string or integer in …\nImplement <code>to_fixed_bytes</code> for wrapped types\nconverting a <code>U256</code> value into a keccak256-based structured …\nAn identifier for a particular contract.\nCache of contracts predeployed or deployed during this …\nSet of predeployed contracts.\n<code>stateHistoryRetentionPeriod</code> in LightClient.sol as the …\nDeploy a contract (with logging and cached deployments)\nThe primary logic for deploying and initializing an …\nDefault deployment function <code>LightClient.sol</code> or …\nThe primary logic for deploying and initializing an …\nThe primary logic for deploying and initializing an …\nThe primary logic for deploying and initializing an …\nUse an already-deployed EspToken.sol instead of deploying …\nUse an already-deployed EspToken.sol proxy instead of …\nUse an already-deployed FeeContract.sol instead of …\nUse an already-deployed FeeContract.sol proxy instead of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nhelper function to decide if the contract at given address …\nUse an already-deployed LightClient.sol instead of …\nUse an already-deployed LightClient.sol proxy instead of …\nLightClientV2.sol\nUse an already-deployed PlonkVerifier.sol instead of …\nPlonkVerifierV2.sol\nUse an already-deployed StakeTable.sol instead of …\nUse an already-deployed StakeTable.sol proxy instead of …\nCommon logic for any Ownable contract to transfer ownership\nUpgrade the light client proxy to use LightClientV2. …\nWrite a .env file.\nControls how backtraces are logged on panic.\nLogging configuration.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the logging configuration from the environment.\nInitialize logging and panic handlers based on this …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTypes which can be deserialized from either integers or …\nDeserialize a type from either a string or integer in …\nDeserialize a type from either a string or integer in …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")